from BioInfoToolkit.Sequences.Profiling import findProfileMostProbableKmers
from BioInfoToolkit.IO import readTextFile, result_path_from_input_path, solution_path_from_input_path, writeTextFile
import os

"""
https://rosalind.info/problems/ba2c/

Given a profile matrix Profile, we can evaluate the probability of every k-mer in a string Text and find a Profile-most probable k-mer in Text, i.e., a k-mer that was most likely to have been generated by Profile among all k-mers in Text. For example, ACGGGGATTACC is the Profile-most probable 12-mer in GGTACGGGGATTACCT. Indeed, every other 12-mer in this string has probability 0.

In general, if there are multiple Profile-most probable k-mers in Text, then we select the first such k-mer occurring in Text.

Profile-most Probable k-mer Problem
    Find a Profile-most probable k-mer in a string.

    Given: A string Text, an integer k, and a 4 x k matrix Profile.

    Return: A Profile-most probable k-mer in Text. (If multiple answers exist, you may return any one.)
"""

OutputT = str


def verify(result: OutputT, solution: OutputT) -> bool:
    # TODO: verify that the probability of the solution is the same as the probability of the result (they might be different if there are multiple solutions)
    correct = len(result) == len(solution) and result == solution
    return correct


def solve(sequence: str, k: int, profile_mat: list[list[float]]) -> OutputT:
    kmers, _ = findProfileMostProbableKmers(
        sequence, k, profile_mat, alphabet)
    return kmers[0]


def load_results(path: str) -> OutputT:
    lines = readTextFile(path)
    median_string = lines[0]
    return median_string


def solve_and_check(input_path: str) -> bool:
    solution_path = solution_path_from_input_path(input_path)

    lines = readTextFile(input_path)
    sequence = lines[0]
    k = int(lines[1])

    alphabet = ['A', 'C', 'G', 'T']
    l = len(alphabet)
    profile_mat = [[float(k) for k in line.split()] for line in lines[2:2+l]]

    result = solve(sequence, k, profile_mat)

    solution = load_results(solution_path)

    correct = verify(result, solution)
    return correct


if __name__ == "__main__":
    cwd = os.path.realpath(os.path.dirname(__file__))
    path = f'{cwd}/rosalind_ba2c_1.txt'

    lines = readTextFile(path)
    sequence = lines[0]
    k = int(lines[1])

    alphabet = ['A', 'C', 'G', 'T']
    l = len(alphabet)
    profile_mat = [[float(k) for k in line.split()] for line in lines[2:2+l]]

    kmer = solve(sequence, k, profile_mat)

    out = kmer
    print(out)

    result_path = result_path_from_input_path(path)
    writeTextFile(result_path, out, 'w')

    correct = solve_and_check(path)
    print(correct)

